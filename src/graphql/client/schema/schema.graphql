# Indicates that an Input Object is a OneOf Input Object (and thus requires
#                         exactly one of its field be provided)
directive @oneOf on INPUT_OBJECT

type BootpRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  op: Int!
  htype: Int!
  hops: Int!
  xid: StringNumberU32!
  ciaddr: String!
  yiaddr: String!
  siaddr: String!
  giaddr: String!
  chaddr: [Int!]!
  sname: String!
  file: String!
}

type BootpRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BootpRawEventEdge!]!

  # A list of nodes.
  nodes: [BootpRawEvent!]!
}

# An edge in a connection.
type BootpRawEventEdge {
  # The item at the end of the edge
  node: BootpRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type Config {
  ingestSrvAddr: String!
  publishSrvAddr: String!
  graphqlSrvAddr: String!
  retention: String!
  dataDir: String!
  logDir: String
  exportDir: String!
  maxOpenFiles: Int!
  maxMbOfLevelBase: StringNumberU64!
  numOfThread: Int!
  maxSubCompactions: StringNumberU32!
  addrToPeers: String
  peers: [PeerIdentity!]
  ackTransmission: Int!
}

# Represents an event extracted from a session.
type ConnRawEvent {
  # Start Time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # Connection state. This is only used in TCP connections.
  #
  # The connection state is a string of letters that represent the state of the connection. The
  # letters are as follows:
  #
  # - S: The originator sent a SYN segment.
  # - h: The responder sent a SYN ACK segment.
  # - A: The originator sent an ACK segment.
  # - D: The originator sent at least one segment with payload data. In this case, that was HTTP
  # over TCP.
  # - a: The responder replied with an ACK segment.
  # - d: The responder replied with at least one segment with payload data.
  # - F: The originator sent a FIN ACK segment.
  # - f: The responder replied with a FIN ACK segment.
  # - R: The originator sent a RST segment.
  # - r: The responder sent a RST segment.
  # - T: Timeout
  #
  # For example, `ShDdAaFf` indicates a session without packet loss.
  connState: String!

  # Duration. It is in nanoseconds.
  duration: StringNumberI64!

  # Service name.
  service: String!

  # Bytes sent by source.
  origBytes: StringNumberU64!

  # Bytes received by destination.
  respBytes: StringNumberU64!

  # Packets sent by source.
  origPkts: StringNumberU64!

  # Packets received by destination.
  respPkts: StringNumberU64!

  # Layer 2 bytes sent by source.
  origL2Bytes: StringNumberU64!

  # Layer 2 bytes received by destination.
  respL2Bytes: StringNumberU64!
}

type ConnRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ConnRawEventEdge!]!

  # A list of nodes.
  nodes: [ConnRawEvent!]!
}

# An edge in a connection.
type ConnRawEventEdge {
  # The item at the end of the edge
  node: ConnRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

# Implement the DateTime<Utc> scalar
#
# The input/output is a string in RFC3339 format.
scalar DateTime

type DceRpcRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  rtt: StringNumberI64!
  namedPipe: String!
  endpoint: String!
  operation: String!
}

type DceRpcRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DceRpcRawEventEdge!]!

  # A list of nodes.
  nodes: [DceRpcRawEvent!]!
}

# An edge in a connection.
type DceRpcRawEventEdge {
  # The item at the end of the edge
  node: DceRpcRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type DhcpRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  msgType: Int!
  ciaddr: String!
  yiaddr: String!
  siaddr: String!
  giaddr: String!
  subnetMask: String!
  router: [String!]!
  domainNameServer: [String!]!
  reqIpAddr: String!
  leaseTime: StringNumberU32!
  serverId: String!
  paramReqList: [Int!]!
  message: String!
  renewalTime: StringNumberU32!
  rebindingTime: StringNumberU32!
  classId: [Int!]!
  clientIdType: Int!
  clientId: [Int!]!
}

type DhcpRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DhcpRawEventEdge!]!

  # A list of nodes.
  nodes: [DhcpRawEvent!]!
}

# An edge in a connection.
type DhcpRawEventEdge {
  # The item at the end of the edge
  node: DhcpRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type DnsEventEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  queryName: String!
  queryStatus: StringNumberU32!
  queryResults: [String!]!
  image: String!
  user: String!
}

type DnsEventEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DnsEventEventEdge!]!

  # A list of nodes.
  nodes: [DnsEventEvent!]!
}

# An edge in a connection.
type DnsEventEventEdge {
  # The item at the end of the edge
  node: DnsEventEvent!

  # A cursor for use in pagination
  cursor: String!
}

type DnsRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  query: String!
  answer: [String!]!
  transId: Int!
  rtt: StringNumberI64!
  qclass: Int!
  qtype: Int!
  rcode: Int!
  aaFlag: Boolean!
  tcFlag: Boolean!
  rdFlag: Boolean!
  raFlag: Boolean!
  ttl: [Int!]!
}

type DnsRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DnsRawEventEdge!]!

  # A list of nodes.
  nodes: [DnsRawEvent!]!
}

# An edge in a connection.
type DnsRawEventEdge {
  # The item at the end of the edge
  node: DnsRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

input ExportFilter {
  protocol: String!
  sensorId: String!
  agentName: String
  agentId: String
  kind: String
  time: TimeRange
  origAddr: IpRange
  respAddr: IpRange
  origPort: PortRange
  respPort: PortRange
}

type FileCreateEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  targetFilename: String!
  creationUtcTime: StringNumberI64!
  user: String!
}

type FileCreateEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileCreateEventEdge!]!

  # A list of nodes.
  nodes: [FileCreateEvent!]!
}

# An edge in a connection.
type FileCreateEventEdge {
  # The item at the end of the edge
  node: FileCreateEvent!

  # A cursor for use in pagination
  cursor: String!
}

type FileCreateStreamHashEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  targetFilename: String!
  creationUtcTime: StringNumberI64!
  hash: [String!]!
  contents: String!
  user: String!
}

type FileCreateStreamHashEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileCreateStreamHashEventEdge!]!

  # A list of nodes.
  nodes: [FileCreateStreamHashEvent!]!
}

# An edge in a connection.
type FileCreateStreamHashEventEdge {
  # The item at the end of the edge
  node: FileCreateStreamHashEvent!

  # A cursor for use in pagination
  cursor: String!
}

type FileCreationTimeChangedEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  targetFilename: String!
  creationUtcTime: StringNumberI64!
  previousCreationUtcTime: StringNumberI64!
  user: String!
}

type FileCreationTimeChangedEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileCreationTimeChangedEventEdge!]!

  # A list of nodes.
  nodes: [FileCreationTimeChangedEvent!]!
}

# An edge in a connection.
type FileCreationTimeChangedEventEdge {
  # The item at the end of the edge
  node: FileCreationTimeChangedEvent!

  # A cursor for use in pagination
  cursor: String!
}

type FileDeleteDetectedEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  user: String!
  image: String!
  targetFilename: String!
  hashes: [String!]!
  isExecutable: Boolean!
}

type FileDeleteDetectedEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileDeleteDetectedEventEdge!]!

  # A list of nodes.
  nodes: [FileDeleteDetectedEvent!]!
}

# An edge in a connection.
type FileDeleteDetectedEventEdge {
  # The item at the end of the edge
  node: FileDeleteDetectedEvent!

  # A cursor for use in pagination
  cursor: String!
}

type FileDeleteEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  user: String!
  image: String!
  targetFilename: String!
  hashes: [String!]!
  isExecutable: Boolean!
  archived: Boolean!
}

type FileDeleteEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileDeleteEventEdge!]!

  # A list of nodes.
  nodes: [FileDeleteEvent!]!
}

# An edge in a connection.
type FileDeleteEventEdge {
  # The item at the end of the edge
  node: FileDeleteEvent!

  # A cursor for use in pagination
  cursor: String!
}

# Represents an event extracted from the FTP protocol.
type FtpRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # Username.
  user: String!

  # Password.
  password: String!

  # Command.
  command: String!

  # Reply code.
  replyCode: String!

  # Reply message.
  replyMsg: String!

  # Passive mode flag.
  dataPassive: Boolean!

  # Data channel source IP address.
  dataOrigAddr: String!

  # Data channel destination IP address.
  dataRespAddr: String!

  # Data channel destination port number.
  dataRespPort: Int!

  # Filename.
  file: String!

  # File size.
  fileSize: StringNumberU64!

  # File ID.
  fileId: String!
}

type FtpRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FtpRawEventEdge!]!

  # A list of nodes.
  nodes: [FtpRawEvent!]!
}

# An edge in a connection.
type FtpRawEventEdge {
  # The item at the end of the edge
  node: FtpRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

# Represents an event extracted from the HTTP protocol.
type HttpRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # HTTP method.
  method: String!

  # Host.
  host: String!

  # URI.
  uri: String!

  # Referrer.
  referrer: String!

  # HTTP version.
  version: String!

  # User agent.
  userAgent: String!

  # Request length.
  requestLen: StringNumberUsize!

  # Response length.
  responseLen: StringNumberUsize!

  # Status code.
  statusCode: Int!

  # Status message.
  statusMsg: String!

  # Username.
  username: String!

  # Password.
  password: String!

  # Cookie.
  cookie: String!

  # Content encoding.
  contentEncoding: String!

  # Content type.
  contentType: String!

  # Cache control.
  cacheControl: String!

  # Request file names.
  origFilenames: [String!]!

  # Request MIME types.
  origMimeTypes: [String!]!

  # Response file names.
  respFilenames: [String!]!

  # Response MIME types.
  respMimeTypes: [String!]!

  # POST body.
  postBody: [Int!]!

  # Last state.
  state: String!
}

type HttpRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [HttpRawEventEdge!]!

  # A list of nodes.
  nodes: [HttpRawEvent!]!
}

# An edge in a connection.
type HttpRawEventEdge {
  # The item at the end of the edge
  node: HttpRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type ImageLoadedEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  imageLoaded: String!
  fileVersion: String!
  description: String!
  product: String!
  company: String!
  originalFileName: String!
  hashes: [String!]!
  signed: Boolean!
  signature: String!
  signatureStatus: String!
  user: String!
}

type ImageLoadedEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ImageLoadedEventEdge!]!

  # A list of nodes.
  nodes: [ImageLoadedEvent!]!
}

# An edge in a connection.
type ImageLoadedEventEdge {
  # The item at the end of the edge
  node: ImageLoadedEvent!

  # A cursor for use in pagination
  cursor: String!
}

input IpRange {
  start: String
  end: String
}

# Represents an event extracted from the Kerberos protocol.
type KerberosRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # Client time.
  clientTime: StringNumberI64!

  # Server time.
  serverTime: StringNumberI64!

  # Error code.
  errorCode: StringNumberU32!

  # Client realm.
  clientRealm: String!

  # Client name type.
  cnameType: Int!

  # Client name.
  clientName: [String!]!

  # Realm.
  realm: String!

  # Service name type.
  snameType: Int!

  # Service name.
  serviceName: [String!]!
}

type KerberosRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [KerberosRawEventEdge!]!

  # A list of nodes.
  nodes: [KerberosRawEvent!]!
}

# An edge in a connection.
type KerberosRawEventEdge {
  # The item at the end of the edge
  node: KerberosRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

# Represents an event extracted from the LDAP protocol.
type LdapRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # Message ID.
  messageId: StringNumberU32!

  # Version.
  version: Int!

  # Operation code.
  opcode: [String!]!

  # Result code.
  result: [String!]!

  # Diagnostic message.
  diagnosticMessage: [String!]!

  # Object.
  object: [String!]!

  # Argument.
  argument: [String!]!
}

type LdapRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LdapRawEventEdge!]!

  # A list of nodes.
  nodes: [LdapRawEvent!]!
}

# An edge in a connection.
type LdapRawEventEdge {
  # The item at the end of the edge
  node: LdapRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

input LogFilter {
  time: TimeRange
  sensor: String!
  kind: String
}

type LogRawEvent {
  time: DateTime!
  log: String!
}

type LogRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LogRawEventEdge!]!

  # A list of nodes.
  nodes: [LogRawEvent!]!
}

# An edge in a connection.
type LogRawEventEdge {
  # The item at the end of the edge
  node: LogRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

# Represents an event extracted from the MQTT protocol.
type MqttRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # MQTT protocol.
  protocol: String!

  # Version.
  version: Int!

  # Client ID.
  clientId: String!

  # Connection acknowledgement response.
  connackReason: Int!

  # Subscription request.
  subscribe: [String!]!

  # Subscription acknowledgement response.
  subackReason: [Int!]!
}

type MqttRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MqttRawEventEdge!]!

  # A list of nodes.
  nodes: [MqttRawEvent!]!
}

# An edge in a connection.
type MqttRawEventEdge {
  # The item at the end of the edge
  node: MqttRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  setConfig(draft: String!): Boolean!
  stop: Boolean!
  reboot: Boolean!
  shutdown: Boolean!
}

type Netflow5RawEvent {
  time: DateTime!
  srcAddr: String!
  dstAddr: String!
  nextHop: String!
  input: Int!
  output: Int!
  dPkts: StringNumberU32!
  dOctets: StringNumberU32!
  first: String!
  last: String!
  srcPort: Int!
  dstPort: Int!
  tcpFlags: String!
  prot: Int!
  tos: String!
  srcAs: Int!
  dstAs: Int!
  srcMask: Int!
  dstMask: Int!
  sequence: StringNumberU32!
  engineType: Int!
  engineId: Int!
  samplingMode: String!
  samplingRate: Int!
}

type Netflow5RawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [Netflow5RawEventEdge!]!

  # A list of nodes.
  nodes: [Netflow5RawEvent!]!
}

# An edge in a connection.
type Netflow5RawEventEdge {
  # The item at the end of the edge
  node: Netflow5RawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type Netflow9RawEvent {
  time: DateTime!
  sequence: StringNumberU32!
  sourceId: StringNumberU32!
  templateId: Int!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  contents: String!
}

type Netflow9RawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [Netflow9RawEventEdge!]!

  # A list of nodes.
  nodes: [Netflow9RawEvent!]!
}

# An edge in a connection.
type Netflow9RawEventEdge {
  # The item at the end of the edge
  node: Netflow9RawEvent!

  # A cursor for use in pagination
  cursor: String!
}

input NetflowFilter {
  time: TimeRange
  sensor: String!
  origAddr: IpRange
  respAddr: IpRange
  origPort: PortRange
  respPort: PortRange
  contents: String
}

type NetworkConnectionEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  user: String!
  protocol: String!
  initiated: Boolean!
  sourceIsIpv6: Boolean!
  sourceIp: String!
  sourceHostname: String!
  sourcePort: Int!
  sourcePortName: String!
  destinationIsIpv6: Boolean!
  destinationIp: String!
  destinationHostname: String!
  destinationPort: Int!
  destinationPortName: String!
}

type NetworkConnectionEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NetworkConnectionEventEdge!]!

  # A list of nodes.
  nodes: [NetworkConnectionEvent!]!
}

# An edge in a connection.
type NetworkConnectionEventEdge {
  # The item at the end of the edge
  node: NetworkConnectionEvent!

  # A cursor for use in pagination
  cursor: String!
}

input NetworkFilter {
  time: TimeRange
  sensor: String!
  origAddr: IpRange
  respAddr: IpRange
  origPort: PortRange
  respPort: PortRange
  logLevel: String
  logContents: String
  agentId: String
}

union NetworkRawEvents =
    ConnRawEvent
  | DnsRawEvent
  | HttpRawEvent
  | RdpRawEvent
  | NtlmRawEvent
  | KerberosRawEvent
  | SshRawEvent
  | DceRpcRawEvent
  | FtpRawEvent
  | MqttRawEvent
  | LdapRawEvent
  | TlsRawEvent
  | SmbRawEvent
  | NfsRawEvent
  | SmtpRawEvent
  | BootpRawEvent
  | DhcpRawEvent

type NetworkRawEventsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NetworkRawEventsEdge!]!

  # A list of nodes.
  nodes: [NetworkRawEvents!]!
}

# An edge in a connection.
type NetworkRawEventsEdge {
  # The item at the end of the edge
  node: NetworkRawEvents!

  # A cursor for use in pagination
  cursor: String!
}

# Represents an event extracted from the NFS protocol.
type NfsRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # Read files.
  readFiles: [String!]!

  # Write files.
  writeFiles: [String!]!
}

type NfsRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NfsRawEventEdge!]!

  # A list of nodes.
  nodes: [NfsRawEvent!]!
}

# An edge in a connection.
type NfsRawEventEdge {
  # The item at the end of the edge
  node: NfsRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type NtlmRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  username: String!
  hostname: String!
  domainname: String!
  success: String!
  protocol: String!
}

type NtlmRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NtlmRawEventEdge!]!

  # A list of nodes.
  nodes: [NtlmRawEvent!]!
}

# An edge in a connection.
type NtlmRawEventEdge {
  # The item at the end of the edge
  node: NtlmRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

input OpLogFilter {
  time: TimeRange
  sensor: String
  agentId: String
  logLevel: String
  contents: String
}

type OpLogRawEvent {
  time: DateTime!
  level: String!
  contents: String!
  agentName: String!
  sensor: String!
}

type OpLogRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OpLogRawEventEdge!]!

  # A list of nodes.
  nodes: [OpLogRawEvent!]!
}

# An edge in a connection.
type OpLogRawEventEdge {
  # The item at the end of the edge
  node: OpLogRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type Packet {
  requestTime: DateTime!
  packetTime: DateTime!
  packet: String!
}

type PacketConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PacketEdge!]!

  # A list of nodes.
  nodes: [Packet!]!
}

# An edge in a connection.
type PacketEdge {
  # The item at the end of the edge
  node: Packet!

  # A cursor for use in pagination
  cursor: String!
}

input PacketFilter {
  sensor: String!
  requestTime: DateTime!
  packetTime: TimeRange
}

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Pcap {
  requestTime: DateTime!
  parsedPcap: String!
}

type PeerIdentity {
  addr: String!
  hostname: String!
}

type PipeEventEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  eventType: String!
  processGuid: String!
  processId: StringNumberU32!
  pipeName: String!
  image: String!
  user: String!
}

type PipeEventEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PipeEventEventEdge!]!

  # A list of nodes.
  nodes: [PipeEventEvent!]!
}

# An edge in a connection.
type PipeEventEventEdge {
  # The item at the end of the edge
  node: PipeEventEvent!

  # A cursor for use in pagination
  cursor: String!
}

input PortRange {
  start: Int
  end: Int
}

type ProcessCreateEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  fileVersion: String!
  description: String!
  product: String!
  company: String!
  originalFileName: String!
  commandLine: String!
  currentDirectory: String!
  user: String!
  logonGuid: String!
  logonId: StringNumberU32!
  terminalSessionId: StringNumberU32!
  integrityLevel: String!
  hashes: [String!]!
  parentProcessGuid: String!
  parentProcessId: StringNumberU32!
  parentImage: String!
  parentCommandLine: String!
  parentUser: String!
}

type ProcessCreateEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProcessCreateEventEdge!]!

  # A list of nodes.
  nodes: [ProcessCreateEvent!]!
}

# An edge in a connection.
type ProcessCreateEventEdge {
  # The item at the end of the edge
  node: ProcessCreateEvent!

  # A cursor for use in pagination
  cursor: String!
}

type ProcessTamperingEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  tamperType: String!
  user: String!
}

type ProcessTamperingEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProcessTamperingEventEdge!]!

  # A list of nodes.
  nodes: [ProcessTamperingEvent!]!
}

# An edge in a connection.
type ProcessTamperingEventEdge {
  # The item at the end of the edge
  node: ProcessTamperingEvent!

  # A cursor for use in pagination
  cursor: String!
}

type ProcessTerminatedEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  user: String!
}

type ProcessTerminatedEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProcessTerminatedEventEdge!]!

  # A list of nodes.
  nodes: [ProcessTerminatedEvent!]!
}

# An edge in a connection.
type ProcessTerminatedEventEdge {
  # The item at the end of the edge
  node: ProcessTerminatedEvent!

  # A cursor for use in pagination
  cursor: String!
}

type Properties {
  estimateLiveDataSize: Int!
  estimateNumKeys: Int!
  stats: String!
}

input PropertyFilter {
  recordType: String!
}

type Query {
  logRawEvents(
    filter: LogFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): LogRawEventConnection!
  opLogRawEvents(
    filter: OpLogFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): OpLogRawEventConnection!
  connRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): ConnRawEventConnection!
  dnsRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): DnsRawEventConnection!
  httpRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): HttpRawEventConnection!
  rdpRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): RdpRawEventConnection!
  smtpRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): SmtpRawEventConnection!
  ntlmRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): NtlmRawEventConnection!
  kerberosRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): KerberosRawEventConnection!
  sshRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): SshRawEventConnection!
  dceRpcRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): DceRpcRawEventConnection!
  ftpRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): FtpRawEventConnection!
  mqttRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): MqttRawEventConnection!
  ldapRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): LdapRawEventConnection!
  tlsRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): TlsRawEventConnection!
  smbRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): SmbRawEventConnection!
  nfsRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): NfsRawEventConnection!
  bootpRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): BootpRawEventConnection!
  dhcpRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): DhcpRawEventConnection!
  networkRawEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): NetworkRawEventsConnection!
  searchConnRawEvents(filter: SearchFilter!): [DateTime!]!
  searchDnsRawEvents(filter: SearchFilter!): [DateTime!]!
  searchHttpRawEvents(filter: SearchFilter!): [DateTime!]!
  searchRdpRawEvents(filter: SearchFilter!): [DateTime!]!
  searchSmtpRawEvents(filter: SearchFilter!): [DateTime!]!
  searchNtlmRawEvents(filter: SearchFilter!): [DateTime!]!
  searchKerberosRawEvents(filter: SearchFilter!): [DateTime!]!
  searchSshRawEvents(filter: SearchFilter!): [DateTime!]!
  searchDceRpcRawEvents(filter: SearchFilter!): [DateTime!]!
  searchFtpRawEvents(filter: SearchFilter!): [DateTime!]!
  searchMqttRawEvents(filter: SearchFilter!): [DateTime!]!
  searchLdapRawEvents(filter: SearchFilter!): [DateTime!]!
  searchTlsRawEvents(filter: SearchFilter!): [DateTime!]!
  searchSmbRawEvents(filter: SearchFilter!): [DateTime!]!
  searchNfsRawEvents(filter: SearchFilter!): [DateTime!]!
  searchBootpRawEvents(filter: SearchFilter!): [DateTime!]!
  searchDhcpRawEvents(filter: SearchFilter!): [DateTime!]!
  export(exportType: String!, filter: ExportFilter!): String!
  packets(
    filter: PacketFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): PacketConnection!
  pcap(filter: PacketFilter!): Pcap!
  periodicTimeSeries(
    filter: TimeSeriesFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): TimeSeriesConnection!
  status: Status!
  propertiesCf(filter: PropertyFilter!): Properties!
  config: Config!
  ping: Boolean!
  sensors: [String!]!
  statistics(
    sensors: [String!]!
    time: TimeRange
    protocols: [String!]
    requestFromPeer: Boolean
  ): [StatisticsRawEvent!]!
  processCreateEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): ProcessCreateEventConnection!
  fileCreateTimeEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): FileCreationTimeChangedEventConnection!
  networkConnectEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): NetworkConnectionEventConnection!
  processTerminateEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): ProcessTerminatedEventConnection!
  imageLoadEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): ImageLoadedEventConnection!
  fileCreateEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): FileCreateEventConnection!
  registryValueSetEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): RegistryValueSetEventConnection!
  registryKeyRenameEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): RegistryKeyValueRenameEventConnection!
  fileCreateStreamHashEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): FileCreateStreamHashEventConnection!
  pipeEventEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): PipeEventEventConnection!
  dnsQueryEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): DnsEventEventConnection!
  fileDeleteEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): FileDeleteEventConnection!
  processTamperEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): ProcessTamperingEventConnection!
  fileDeleteDetectedEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): FileDeleteDetectedEventConnection!
  searchProcessCreateEvents(filter: SearchFilter!): [DateTime!]!
  searchFileCreateTimeEvents(filter: SearchFilter!): [DateTime!]!
  searchNetworkConnectEvents(filter: SearchFilter!): [DateTime!]!
  searchProcessTerminateEvents(filter: SearchFilter!): [DateTime!]!
  searchImageLoadEvents(filter: SearchFilter!): [DateTime!]!
  searchFileCreateEvents(filter: SearchFilter!): [DateTime!]!
  searchRegistryValueSetEvents(filter: SearchFilter!): [DateTime!]!
  searchRegistryKeyRenameEvents(filter: SearchFilter!): [DateTime!]!
  searchFileCreateStreamHashEvents(filter: SearchFilter!): [DateTime!]!
  searchPipeEventEvents(filter: SearchFilter!): [DateTime!]!
  searchDnsQueryEvents(filter: SearchFilter!): [DateTime!]!
  searchFileDeleteEvents(filter: SearchFilter!): [DateTime!]!
  searchProcessTamperEvents(filter: SearchFilter!): [DateTime!]!
  searchFileDeleteDetectedEvents(filter: SearchFilter!): [DateTime!]!
  sysmonEvents(
    filter: NetworkFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): SysmonEventsConnection!
  secuLogRawEvents(
    filter: SecuLogFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): SecuLogRawEventConnection!
  netflow5RawEvents(
    filter: NetflowFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): Netflow5RawEventConnection!
  netflow9RawEvents(
    filter: NetflowFilter!
    after: String
    before: String
    first: Int
    last: Int
  ): Netflow9RawEventConnection!
}

type RdpRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  cookie: String!
}

type RdpRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RdpRawEventEdge!]!

  # A list of nodes.
  nodes: [RdpRawEvent!]!
}

# An edge in a connection.
type RdpRawEventEdge {
  # The item at the end of the edge
  node: RdpRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type RegistryKeyValueRenameEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  eventType: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  targetObject: String!
  newName: String!
  user: String!
}

type RegistryKeyValueRenameEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RegistryKeyValueRenameEventEdge!]!

  # A list of nodes.
  nodes: [RegistryKeyValueRenameEvent!]!
}

# An edge in a connection.
type RegistryKeyValueRenameEventEdge {
  # The item at the end of the edge
  node: RegistryKeyValueRenameEvent!

  # A cursor for use in pagination
  cursor: String!
}

type RegistryValueSetEvent {
  time: DateTime!
  agentName: String!
  agentId: String!
  eventType: String!
  processGuid: String!
  processId: StringNumberU32!
  image: String!
  targetObject: String!
  details: String!
  user: String!
}

type RegistryValueSetEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RegistryValueSetEventEdge!]!

  # A list of nodes.
  nodes: [RegistryValueSetEvent!]!
}

# An edge in a connection.
type RegistryValueSetEventEdge {
  # The item at the end of the edge
  node: RegistryValueSetEvent!

  # A cursor for use in pagination
  cursor: String!
}

input SearchFilter {
  time: TimeRange
  sensor: String!
  origAddr: IpRange
  respAddr: IpRange
  origPort: PortRange
  respPort: PortRange
  logLevel: String
  logContents: String
  times: [DateTime!]!
  keyword: String
  agentId: String
}

input SecuLogFilter {
  time: TimeRange
  sensor: String!
  kind: String!
  origAddr: IpRange
  respAddr: IpRange
  origPort: PortRange
  respPort: PortRange
  log: String
}

type SecuLogRawEvent {
  time: DateTime!
  logType: String!
  version: String!
  origAddr: String
  origPort: Int
  respAddr: String
  respPort: Int
  proto: Int
  contents: String!
}

type SecuLogRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SecuLogRawEventEdge!]!

  # A list of nodes.
  nodes: [SecuLogRawEvent!]!
}

# An edge in a connection.
type SecuLogRawEventEdge {
  # The item at the end of the edge
  node: SecuLogRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

# Represents an event extracted from the SMB protocol.
type SmbRawEvent {
  # Start time.
  time: DateTime!

  # Source IP address.
  origAddr: String!

  # Source port number.
  origPort: Int!

  # Destination IP address.
  respAddr: String!

  # Destination port number.
  respPort: Int!

  # Protocol number. TCP is 6, UDP is 17.
  proto: Int!

  # End time in nanoseconds.
  lastTime: StringNumberI64!

  # Command.
  command: Int!

  # Path.
  path: String!

  # Service.
  service: String!

  # Filename.
  fileName: String!

  # File size
  fileSize: StringNumberU64!

  # Resource type.
  resourceType: Int!

  # File ID.
  fid: Int!

  # Create time.
  createTime: StringNumberI64!

  # Access time.
  accessTime: StringNumberI64!

  # Write time.
  writeTime: StringNumberI64!

  # Change time.
  changeTime: StringNumberI64!
}

type SmbRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SmbRawEventEdge!]!

  # A list of nodes.
  nodes: [SmbRawEvent!]!
}

# An edge in a connection.
type SmbRawEventEdge {
  # The item at the end of the edge
  node: SmbRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type SmtpRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  mailfrom: String!
  date: String!
  from: String!
  to: String!
  subject: String!
  agent: String!
  state: String!
}

type SmtpRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SmtpRawEventEdge!]!

  # A list of nodes.
  nodes: [SmtpRawEvent!]!
}

# An edge in a connection.
type SmtpRawEventEdge {
  # The item at the end of the edge
  node: SmtpRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type SshRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  client: String!
  server: String!
  cipherAlg: String!
  macAlg: String!
  compressionAlg: String!
  kexAlg: String!
  hostKeyAlg: String!
  hasshAlgorithms: String!
  hassh: String!
  hasshServerAlgorithms: String!
  hasshServer: String!
  clientShka: String!
  serverShka: String!
}

type SshRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SshRawEventEdge!]!

  # A list of nodes.
  nodes: [SshRawEvent!]!
}

# An edge in a connection.
type SshRawEventEdge {
  # The item at the end of the edge
  node: SshRawEvent!

  # A cursor for use in pagination
  cursor: String!
}

type StatisticsDetail {
  protocol: String!
  bps: Float
  pps: Float
  eps: Float
}

type StatisticsInfo {
  timestamp: StringNumberI64!
  detail: [StatisticsDetail!]!
}

type StatisticsRawEvent {
  sensor: String!
  stats: [StatisticsInfo!]!
}

type Status {
  name: String!
  cpuUsage: Float!
  totalMemory: Int!
  usedMemory: Int!
  totalDiskSpace: Int!
  usedDiskSpace: Int!
}

scalar StringNumberI64

scalar StringNumberU32

scalar StringNumberU64

scalar StringNumberUsize

union SysmonEvents =
    ProcessCreateEvent
  | FileCreationTimeChangedEvent
  | NetworkConnectionEvent
  | ProcessTerminatedEvent
  | ImageLoadedEvent
  | FileCreateEvent
  | RegistryValueSetEvent
  | RegistryKeyValueRenameEvent
  | FileCreateStreamHashEvent
  | PipeEventEvent
  | DnsEventEvent
  | FileDeleteEvent
  | ProcessTamperingEvent
  | FileDeleteDetectedEvent

type SysmonEventsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SysmonEventsEdge!]!

  # A list of nodes.
  nodes: [SysmonEvents!]!
}

# An edge in a connection.
type SysmonEventsEdge {
  # The item at the end of the edge
  node: SysmonEvents!

  # A cursor for use in pagination
  cursor: String!
}

input TimeRange {
  start: DateTime
  end: DateTime
}

type TimeSeries {
  start: DateTime!
  id: String!
  data: [Float!]!
}

type TimeSeriesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TimeSeriesEdge!]!

  # A list of nodes.
  nodes: [TimeSeries!]!
}

# An edge in a connection.
type TimeSeriesEdge {
  # The item at the end of the edge
  node: TimeSeries!

  # A cursor for use in pagination
  cursor: String!
}

input TimeSeriesFilter {
  time: TimeRange
  id: String!
}

type TlsRawEvent {
  time: DateTime!
  origAddr: String!
  origPort: Int!
  respAddr: String!
  respPort: Int!
  proto: Int!
  lastTime: StringNumberI64!
  serverName: String!
  alpnProtocol: String!
  ja3: String!
  version: String!
  clientCipherSuites: [Int!]!
  clientExtensions: [Int!]!
  cipher: Int!
  extensions: [Int!]!
  ja3S: String!
  serial: String!
  subjectCountry: String!
  subjectOrgName: String!
  subjectCommonName: String!
  validityNotBefore: StringNumberI64!
  validityNotAfter: StringNumberI64!
  subjectAltName: String!
  issuerCountry: String!
  issuerOrgName: String!
  issuerOrgUnitName: String!
  issuerCommonName: String!
  lastAlert: Int!
}

type TlsRawEventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TlsRawEventEdge!]!

  # A list of nodes.
  nodes: [TlsRawEvent!]!
}

# An edge in a connection.
type TlsRawEventEdge {
  # The item at the end of the edge
  node: TlsRawEvent!

  # A cursor for use in pagination
  cursor: String!
}
